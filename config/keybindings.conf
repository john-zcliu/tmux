# Using Tmux Copy mode:
#
# Enter the copy-mode: prefix [
# Navigate: h, j, k, l, w, W, b, B, {, }
# Search: ?, /
# Start highlight: v
# Yank the highlighted text: Enter
# Paste: prefix ]

###############################################################################
# Key Bindings
###############################################################################

# Unset default prefix
unbind C-b
unbind C-a

# Set Prefix to Ctrl+a
set-option -g prefix C-space
bind-key C-space send-prefix

# Split panes using \ and - (\ because it doesn't require shift)
# Start in same directory when splitting windows
bind '\' split-window -h -c '#{pane_current_path}'
bind - split-window -v -c '#{pane_current_path}'
unbind '"'
unbind %

# When creating a window, start at the same path
bind c new-window -c '#{pane_current_path}'

# Switch Pane positions
bind -n M-[ swap-pane -D
bind -n M-] swap-pane -U

# Keybindings for copy-mode-vi
set -g mode-keys vi
bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi V send -X select-line

# 1. FIX: Unbind the default Enter key in copy mode
# This is necessary because it is re-bound later to pipe the selection to xclip.
unbind -T copy-mode-vi Enter 

# 2. FIX: Bind 'y' to copy to the system clipboard using xclip
# 'y' now yanks the selection and pipes it to the system clipboard.
bind-key -T copy-mode-vi y send -X copy-pipe-and-cancel 'xclip -i -selection clipboard'

# 3. FIX: Bind 'Enter' to copy to the system clipboard using xclip
# This provides the traditional "Enter to copy" behavior.
bind-key -T copy-mode-vi Enter send -X copy-pipe-and-cancel 'xclip -i -selection clipboard'

# 4. FIX: Bind MouseDragEnd1Pane to copy to the system clipboard using xclip
# This handles copying when releasing the mouse button after a selection.
bind-key -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel 'xclip -i -selection clipboard'

# --- Remaining Config (unmodified but included for context) ---

# Paste from clipboard
# Note: xclip puts the text in the system clipboard; this is the key to paste in tmux.
bind P paste-buffer

# Toggle the status bar (This is fine as is)
bind-key t set-option status


# # Reload config file
bind r source-file ~/.config/tmux/tmux.conf \; display '~/.config/tmux/tmux.conf sourced'
bind-key M split-window -h "nvim ~/.config/tmux/tmux.conf"

# Tmux sessionizer
bind e run-shell "tmux neww ~/.config/tmux/scripts/tmux-sessionizer.sh"

###############################################################################
# Tmux Nagivator - https://github.com/christoomey/vim-tmux-navigator
###############################################################################

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"

bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'

if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

###############################################################################
# Popup keymaps
###############################################################################

bind -r g display-popup -d '#{pane_current_path}' -E -w 90% -h 90% "lazygit -ucd ~/.config/lazygit/" # Open Lazygit inside popup
bind -r f display-popup -d '#{pane_current_path}' -E -w 90% -h 90% "ranger" # Open Lazygit inside popup
# bind -r w display-popup -d '#{pane_current_path}' -w 90% -h 90% # Create new popup scratch window
bind-key h display-popup -w 90% -h 90% -E "htop"
bind-key i display-popup -w 90% -h 90% -E "irb"
